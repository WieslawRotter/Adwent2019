const SIZE: i32 = 35;
fn main() {
    let puzzle = ".#......#...#.....#..#......#..##..#..#.......#..........#..##.##.......##......#.#..#..#..##...#.##.###......#........#...........#.......##....##.....#.......#........#..#.#......#...#...#.....#.##.......#...#....##...#..##....#....#......#..............#......#.#.....#..#...#......#........###.......#..........#.##.#...#......#..#.....#..#......#..#..####.##...##......##..#####.......##.........#...#.........#........#....#......##.....#...#........#.##..#....#....#........#.###.#........#...#..#....#..#.#.##....#.........#.....#.###....###....##..#..#........#...........#.#.........#.......#....#....#.###.....#....#.#......#...##.##.......##...##....##.........#...#...........#....##....#..#.#.#...##.#...#.#...#.#.#.#..##.#...#..#..#..#............#...#...#.#.....#.#.....#.####..........#..................#.#.##.....#....#....#...#..#....#.....#....#####..####........#...............#....#.#..#..#....##......#...#........####....#..#......#.#...##.....#...##....#.###.##.#.##.#.....#......#....#.####...#......###.....##.......#.....#....#......#..#..#.#..#.......#.......#...#........#.##...#.....#.....####.#..........#.#.......#.....##..#..#.....#.#.........#..#.#.##.........#..........##.#.##.......###..#.....#....#....#.#.......####..#..............#.#...........##.#.#..";
    let mut asteorids: Vec<(i32, i32)> = Vec::new();
    let mut asteorids3: Vec<(i32, i32)> = Vec::new();
    let mut x: i32 = 0;
    let mut y: i32 = 0;
    let mut max_num = 0;
    let mut max_point: (i32, i32) = (0, 0);

    for element in puzzle.chars() {
        if element == '#' {
            asteorids.push((x, y));
        }
        if x == SIZE {
            x = 0;
            y += 1;
        } else {
            x += 1;
        }
    }

    for astr1 in &asteorids {
        asteorids3.clear();
        for astr2 in &asteorids {
            if astr1 != astr2 {
                let mut in_line = false;
                for astr3 in &asteorids3 {
                    if inline(*astr1, *astr2, *astr3) {
                        in_line = true
                    }
                }
                if !in_line {
                    asteorids3.push(*astr2);
                }
            }
        }
        if max_num < asteorids3.len() {
            max_num = asteorids3.len();
            max_point = *astr1;
        }
    }

    println!("{:?} {}", max_point, max_num);
}

fn inline(p1: (i32, i32), p2: (i32, i32), p3: (i32, i32)) -> bool {
    if (p2.1 - p1.1)*(p3.0 - p1.0) - (p3.1 - p1.1)*(p2.0 - p1.0) == 0 {
        if ((p1.0 - p2.0).abs() + (p1.0 - p3.0).abs() == (p2.0 - p3.0).abs()) &&
        ((p1.1 - p2.1).abs() + (p1.1 - p3.1).abs() == (p2.1 - p3.1).abs()) {
            false
        } else {
            true
        }
    } else {
        false
    }
}
